# Classes and objects {background-image="unsw-yellow-shape.png"}

## Make your own types

Often, the built-in types (`int`, `double`, `list`, etc.) aren't enough. 
Need to make a new type of object.

### Example: students

Many students, similar characteristics, but unique values of:

- name,
- zID,
- grades.

Shared way to calculate WAM.

## An empty class

Start off by making the simplest class possible.
```{python}
class Student:
  pass
```

We can create student objects using:

```{python}
don = Student()
zhuge = Student()
```

## Add their names

Let each student object store a name.

```{python}
class Student:
  def __init__(self, name):
    self.name = name
```
```{python}
don = Student("Don Quixote")
zhuge = Student("Zhuge Liang")
```

```{python}
don.name
```

```{python}
zhuge.name
```

::: fragment
::: {.callout-important}
The first parameter for each function inside a class is `self`.
:::
:::

## Add their zIDs and grades

```{python}
#| data-id: student-class
class Student:
	def __init__(self, name, zID, grades):
		self.name = name
		self.zID = zID
		self.grades = grades
```

```{python}
don = Student("Don Quixote", 111222,
    {"ACTL3143": 100, "ACTL5001": 50})
zhuge = Student("Zhuge Liang", 123456,
    {"ACTL3143": 100, "ACTL5001": 100})
```

```{python}
print(don.zID)
zhuge.grades
```

:::{.callout-note}
At this point, `Student` is just POD (plain old data).
:::

## Adding a method

```{python}
#| data-id: student-class
COURSE_CREDITS = {"ACTL3143": 6, "ACTL5001": 12}

class Student:
  def __init__(self, name, zID, grades):
    self.name = name
    self.zID = zID
    self.grades = grades

  def wam(self):
    """
    Calculate the weighted average mark for this student.
    """
    total_credits = 0
    total_grade = 0
    for course, grade in self.grades.items():
      total_credits += COURSE_CREDITS[course]
      total_grade += grade * COURSE_CREDITS[course]
    return total_grade / total_credits
```

## Calling the `wam` method

Now every student object can calculate its own WAM.

```{python}
don = Student("Don Quixote", 111222,
    {"ACTL3143": 100, "ACTL5001": 50})

zhuge = Student("Zhuge Liang", 123456, 
    {"ACTL3143": 100, "ACTL5001": 100})
```

```{python}
don.wam()
```

```{python}
zhuge.wam()
```

::: {.callout-note}
Here, the syntax is `object.method()`.
:::

## Getting help on a method

In Python:
```{python}
help(zhuge.wam)
```

In Jupyter/Colab:
```{python}
?zhuge.wam
```

```{python}
zhuge.wam?
```
## Calling `dir` on an object

```{python}
dir(zhuge)
```

Ignore the `__bla__` things.
These _dunder_ methods are internal/private details.