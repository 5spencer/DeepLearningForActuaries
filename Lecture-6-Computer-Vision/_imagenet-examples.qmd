## Pretrained model

```{python}
#| output: false
from tensorflow.keras.applications import mobilenet
from PIL import Image

model = mobilenet.MobileNet(weights="imagenet")

image_filenames = ["patrick-0.jpg", "umbrella-0.jpg", "hand-15.jpg"]
images = [np.asarray(Image.open(name)) for name in image_filenames]

images_resized = tf.image.resize(images, [224, 224])
inputs = mobilenet.preprocess_input(images_resized)

Y_proba = model.predict(inputs, verbose=0)
top_k = mobilenet.decode_predictions(Y_proba, top=3)

for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
```

## Predicted classes (MobileNet)

::: columns
::: {.column width="15%"}
:::
::: {.column width="50%"}

<br><br>

```{python}
#| echo: false
for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
```
:::
::: {.column width="20%"}

<img src="patrick-0.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="umbrella-0.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="hand-15.jpg" data-lazy-loaded="" style="padding: 0px; margin=0px">

:::
::: {.column width="15%"}
:::
:::

## Predicted classes (MobileNetV2)

::: columns
::: {.column width="15%"}
:::
::: {.column width="50%"}

<br><br>

```{python}
#| echo: false
from tensorflow.keras.applications import mobilenet_v2

model = mobilenet_v2.MobileNetV2(weights="imagenet")
inputs = mobilenet_v2.preprocess_input(images_resized)

Y_proba = model.predict(inputs, verbose=0)
top_k = mobilenet_v2.decode_predictions(Y_proba, top=3)

for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
```
:::
::: {.column width="20%"}

<img src="patrick-0.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="umbrella-0.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="hand-15.jpg" data-lazy-loaded="" style="padding: 0px; margin=0px">

:::
::: {.column width="15%"}
:::
:::

## Predicted classes (InceptionV3)

::: columns
::: {.column width="15%"}
:::
::: {.column width="50%"}

<br><br>

```{python}
#| echo: false
from tensorflow.keras.applications import inception_v3

model = inception_v3.InceptionV3(weights="imagenet")

images_resized = tf.image.resize(images, [299, 299])
inputs = inception_v3.preprocess_input(images_resized)

Y_proba = model.predict(inputs, verbose=0)
top_k = inception_v3.decode_predictions(Y_proba, top=3)

for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
```
:::
::: {.column width="20%"}

<img src="patrick-0.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="umbrella-0.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="hand-15.jpg" data-lazy-loaded="" style="padding: 0px; margin=0px">

:::
::: {.column width="15%"}
:::
:::


## Predicted classes (MobileNet)

::: columns
::: {.column width="15%"}
:::
::: {.column width="50%"}

<br><br>

```{python}
#| echo: false
image_filenames = ["charger-4.jpg", "table-tennis-17.jpg", "water-bottle-15.jpg"]
images = [np.asarray(Image.open(name)) for name in image_filenames]

images_resized = tf.image.resize(images, [224, 224])
inputs = mobilenet.preprocess_input(images_resized)

model = mobilenet.MobileNet(weights="imagenet")
inputs = mobilenet.preprocess_input(images_resized)

Y_proba = model.predict(inputs, verbose=0)
top_k = mobilenet.decode_predictions(Y_proba, top=3)

for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
``` 
:::
::: {.column width="20%"}

<img src="charger-4.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="table-tennis-17.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="water-bottle-15.jpg" data-lazy-loaded="" style="padding: 0px; margin=0px">

:::
::: {.column width="15%"}
:::
:::

## Predicted classes (MobileNetV2)

::: columns
::: {.column width="15%"}
:::
::: {.column width="50%"}

<br><br>

```{python}
#| echo: false
model = mobilenet_v2.MobileNetV2(weights="imagenet")
inputs = mobilenet_v2.preprocess_input(images_resized)

Y_proba = model.predict(inputs, verbose=0)
top_k = mobilenet_v2.decode_predictions(Y_proba, top=3)

for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
```
:::
::: {.column width="20%"}

<img src="charger-4.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="table-tennis-17.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="water-bottle-15.jpg" data-lazy-loaded="" style="padding: 0px; margin=0px">

:::
::: {.column width="15%"}
:::
:::

## Predicted classes (InceptionV3)

::: columns
::: {.column width="15%"}
:::
::: {.column width="50%"}

<br><br>

```{python}
#| echo: false
model = inception_v3.InceptionV3(weights="imagenet")

images_resized = tf.image.resize(images, [299, 299])
inputs = inception_v3.preprocess_input(images_resized)

Y_proba = model.predict(inputs, verbose=0)
top_k = inception_v3.decode_predictions(Y_proba, top=3)

for image_index in range(len(images)):
    print(f"Image #{image_index}:")
    for class_id, name, y_proba in top_k[image_index]:
        print(f" {class_id} - {name} {int(y_proba*100)}%")
    print()
```
:::
::: {.column width="20%"}

<img src="charger-4.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="table-tennis-17.jpg" data-lazy-loaded="" style="padding: 0px; margin: 0px">
<img src="water-bottle-15.jpg" data-lazy-loaded="" style="padding: 0px; margin=0px">

:::
::: {.column width="15%"}
:::
:::

## Transfer learned model

::: columns
::: {.column width="65%"}
```{python}
model_file = "teachable-machine-model-3143.h5"
model = keras.models.load_model(model_file)
model.layers
```

```{python}
model.layers[0].layers
```

```{python}
model.layers[1].layers
```

:::
::: {.column width="35%"}
![Models inside of models...](turtles-all-the-way-down.jpeg)
:::
:::

::: footer
Source: [Behance](https://www.behance.net/gallery/66946885/Turtles-All-the-Way-Down)
:::

## Transfer learned model II

```{python}
model.layers[0].layers[0].layers
```

```{python}
len(model.layers[0].layers[0].layers)
```

## Transfer learned model III

<div style="overflow:auto; height: 90%">
<img src="mobilenet-model.png">
</div>
