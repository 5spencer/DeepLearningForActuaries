---
title: Natural Language Processing
subtitle: ACTL3143 & ACTL5111 Deep Learning for Actuaries
author: Dr Patrick Laub
format:
  revealjs:
    theme: [serif, custom.scss]
    controls: true
    controls-tutorial: true
    logo: unsw-logo.svg
    footer: "Slides: [Dr Patrick Laub](https://pat-laub.github.io) (@PatrickLaub)."
    title-slide-attributes:
      data-background-image: unsw-yellow-shape.png
      data-background-size: contain !important
    transition: none
    slide-number: c/t
    strip-comments: true
    preview-links: false
    margin: 0.2
    chalkboard:
      boardmarker-width: 6
      grid: false
      background:
        - "rgba(255,255,255,0.0)"
        - "https://github.com/rajgoel/reveal.js-plugins/raw/master/chalkboard/img/blackboard.png"
    include-before: <div class="line right"></div>
    include-after: <script>registerRevealCallbacks();</script>
highlight-style: breeze
jupyter: python3
execute:
  keep-ipynb: true
  echo: true
---

```{python}
#| echo: false
import matplotlib

def set_square_figures():
  matplotlib.pyplot.rcParams['figure.figsize'] = (2.0, 2.0)

def set_rectangular_figures():
  matplotlib.pyplot.rcParams['figure.figsize'] = (5.0, 2.0)

def squareFig():
    return matplotlib.pyplot.figure(figsize=(2, 2), dpi=350).gca()

def add_diagonal_line():
    xl = matplotlib.pyplot.xlim()
    yl = matplotlib.pyplot.ylim()
    shortestSide = min(xl[1], yl[1])
    matplotlib.pyplot.plot([0, shortestSide], [0, shortestSide], color="black", linestyle="--")

import cycler
colors = ["#91CCCC", "#FF8FA9", "#CC91BC", "#3F9999", "#A5FFB8"]
matplotlib.pyplot.rcParams["axes.prop_cycle"] = cycler.cycler(color=colors)

set_rectangular_figures()
matplotlib.pyplot.rcParams['figure.dpi'] = 350
matplotlib.pyplot.rcParams['savefig.bbox'] = "tight"
matplotlib.pyplot.rcParams['font.family'] = "serif"

matplotlib.pyplot.rcParams['axes.spines.right'] = False
matplotlib.pyplot.rcParams['axes.spines.top'] = False

import pandas
pandas.options.display.max_rows = 6

import numpy
numpy.set_printoptions(precision=2)
numpy.random.seed(123)

import tensorflow
tensorflow.random.set_seed(1)

import sys
if sys.platform == "darwin":
  tensorflow.config.set_visible_devices([], 'GPU') # disable GPU on Mac
# On Windows, it is a bit faster on GPU: 4m1s vs 4m30s.

def skip_empty(line):
  if line.strip() != "":
    print(line.strip())
```

## Lecture Outline

::: columns
::: column

- Project draft feedback & report/figure style
- Temperature forecasting with RNNs & CNNs
- Transfer learning & convolutional neural networks
- Natural language processing

:::
::: column

![All the projects are progressing well.](poorly-drawn-lines-plan.jpg)

:::
:::

Thanks Hang Nguyen & Michael Jacinto for draft slides.

## Load packages {data-visibility="uncounted"}

```{python}
import random
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import numpy.random as rnd
import pandas as pd
import tensorflow as tf

from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Dense
from tensorflow.keras.metrics import SparseTopKCategoricalAccuracy
from tensorflow.keras.models import Sequential

from tensorflow import keras
from tensorflow.keras import layers

%load_ext watermark
%watermark -p matplotlib,numpy,pandas,tensorflow
```

# Natural Language Processing {background-image="unsw-yellow-shape.png" data-visibility="uncounted"}

::: footer
Source: Krohn (2019), _Deep Learning Illustrated_, Chapter 2.
:::

## What is NLP?

A field of research at the intersection of computer science, linguistics, and artificial intelligence that takes the __naturally spoken or written language__ of humans and __processes it with machines__ to automate or help in certain tasks

## How the computer sees text

Spot the odd one out:

```{python}
#| echo: false
print([ord(x) for x in "patrick laub"])
```

```{python}
#| echo: false
print([ord(x) for x in "PATRICK LAUB"])
```
```{python}
#| echo: false
print([ord(x) for x in "Levi Ackerman"])
```

::: fragment
Generated by:
```{python}
#| eval: false
print([ord(x) for x in "patrick laub"])
print([ord(x) for x in "PATRICK LAUB"])
print([ord(x) for x in "Levi Ackerman"])
```

The `ord` built-in turns characters into their ASCII form.

:::{.callout-tip}
## Question

The largest value for a character is 127, can you guess why?
:::
:::

## ASCII

::: columns
::: {.column width="60%"}
![American Standard Code for Information Interchange](wiki-ASCII-Table-wide.svg)
:::
::: {.column width="40%"}
![Americans when asked how non-English characters get encoded in ASCII](awkward-look-monkey-puppet.png)

Unicode is the new standard.
:::
:::

::: footer
Source: [Wikipedia](https://commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg)
:::

## Random strings

The built-in `chr` function turns numbers into characters.

```{python}
rnd.seed(1)
```
```{python}
chars = [chr(rnd.randint(32, 127)) for _ in range(10)]
chars
```

```{python}
" ".join(chars)
```

```{python}
"".join([chr(rnd.randint(32, 127)) for _ in range(50)])
```

```{python}
"".join([chr(rnd.randint(0, 128)) for _ in range(50)])
```

## Applications of NLP in Industry

__1) Classifying documents__: Using the language within a body of text to classify it into a particular category, e.g.:

- Grouping emails into high and low urgency
- Movie reviews into positive and negative sentiment (i.e. _sentiment analysis_)
- Company news into bullish (positive) and bearish (negative) statements

__2) Machine translation__: Assisting language translators with machine-generated suggestions from a source language (e.g. English) to a target language

## Applications of NLP in Industry

__3) Search engine__ functions, including:

- Autocomplete
- Predicting what information or website user is seeking

__4) Speech recognition__: Interpreting voice commands to provide information or take action. Used in virtual assistants such as Alexa, Siri, and Cortana

## Deep learning & NLP?

Simple NLP applications such as spell checkers and synonym suggesters __do not require deep learning__ and can be solved with __deterministic, rules-based code__ with a dictionary/thesaurus.

More complex NLP applications such as classifying documents, search engine word prediction, and chatbots are complex enough to be solved using deep learning methods.

## NLP in 1966-1973 #1

>A typical story occurred in early machine translation efforts, which were generously funded by the U.S. National Research Council in an attempt to speed up the translation of Russian scientific papers in the wake of the Sputnik launch in 1957.
> It was thought initially that simple syntactic transformations, based on the grammars of Russian and English, and word replacement from an electronic dictionary, would suffice to preserve the exact meanings of sentences.

::: footer
Source: Russell and Norvig (2016), _Artificial Intelligence: A Modern Approach_, Third Edition, p. 21.
:::

## NLP in 1966-1973 #2

> The fact is that accurate translation requires background knowledge in order to resolve ambiguity and establish the content of the sentence.
> The famous retranslation of **“the spirit is willing but the flesh is weak”** as **“the vodka is good but the meat is rotten”** illustrates the difficulties encountered.
> In 1966, a report by an advisory committee found that “there has been no machine translation of general scientific text, and none is in immediate prospect.”
> All U.S. government funding for academic translation projects was canceled.

::: footer
Source: Russell and Norvig (2016), _Artificial Intelligence: A Modern Approach_, Third Edition, p. 21.
:::

## High-level history of deep learning

<br>

<center><img data-src="krohn_f02_03-blur.png"></center>
<p class="caption">A brief history of deep learning.</p>

::: footer
Source: Krohn (2019), _Deep Learning Illustrated_, Figure 2-3.
::: 

{{< include _motor-nlp-example.qmd >}}

{{< include _motor-nlp-example-continued.qmd >}}

{{< include _word-embeddings.qmd >}}

#  {data-visibility="uncounted"}

<h2>Glossary</h2>

::: columns
:::: column

- AlexNet
- bag of words
- CIFAR-10 / CIFAR-100
- GoogLeNet & Inception
- ImageNet

::::
:::: column

- fine-tuning
- lemmatization
- one-hot embedding
- transfer learning
- vocabulary

::::
:::

<script defer>
    // Remove the highlight.js class for the 'compile', 'min', 'max'
    // as there's a bug where they are treated like the Python built-in
    // global functions but we only ever see it as methods like
    // 'model.compile()' or 'predictions.max()'
    buggyBuiltIns = ["compile", "min", "max", "round", "sum"];

    document.querySelectorAll('.bu').forEach((elem) => {
        if (buggyBuiltIns.includes(elem.innerHTML)) {
            elem.classList.remove('bu');
        }
    })

    var registerRevealCallbacks = function() {
        Reveal.on('overviewshown', event => {
            document.querySelector(".line.right").hidden = true;
        });
        Reveal.on('overviewhidden', event => {
            document.querySelector(".line.right").hidden = false;
        });
    };
</script>
