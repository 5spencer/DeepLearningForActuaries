# PyTorch {background-image="unsw-yellow-shape.png" data-visibility="uncounted"}

## Why?

![Fraction of ML papers using PyTorch.](pytorch-papers-of-total.svg)

::: footer
Source: Horace He (2022), [pytorch-vs-tensorflow](http://horace.io/pytorch-vs-tensorflow/).
:::

## Load up FashionMNIST

```{python}
import torch
import torchvision
import torch.nn.functional as F
from torch import nn
from torch.utils.data import DataLoader
%watermark -p torch,torchvision
```

```{python}
training_data = torchvision.datasets.FashionMNIST(
    root="data", train=True, download=True,
    transform=torchvision.transforms.ToTensor())

test_data = torchvision.datasets.FashionMNIST(
    root="data", train=False, download=True,
    transform=torchvision.transforms.ToTensor())

classes = [
    "T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", 
    "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot",
]
```

::: footer
Adapted from: PyTorch (2022), [Quickstart](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html), PyTorch docs.
:::

## Take a look at the data

::: columns
::: {.column width="33%"}
```{python}
x, y = training_data[5]
plt.imshow(x[0])
plt.title(classes[y]);
```
:::
::: {.column width="33%"}
```{python}
x, y = training_data[25]
plt.imshow(x[0])
plt.title(classes[y]);
```
:::
::: {.column width="33%"}
```{python}
x, y = training_data[30]
plt.imshow(x[0])
plt.title(classes[y]);
```
:::
:::

::: footer
Adapted from: PyTorch (2022), [Quickstart](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html), PyTorch docs.
:::

## Batch up the data

```{python}
batch_size = 64

# Create data loaders.
train_dataloader = DataLoader(training_data, batch_size=batch_size)
test_dataloader = DataLoader(test_data, batch_size=batch_size)

for X, y in test_dataloader:
    print(f"Shape of X [N, C, H, W]: {X.shape}")
    print(f"Shape of y: {y.shape} {y.dtype}")
    break

# Get cpu or gpu device for training.
# Get cpu or gpu device for training.
if torch.cuda.is_available():
    device = "cuda"
elif torch.backends.mps.is_available():
    device = "mps" # If on a Mac
else:
    device = "cpu"
```

::: footer
Adapted from: PyTorch (2022), [Quickstart](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html), PyTorch docs.
:::

## Make a sequential model

```{python}
torch.manual_seed(0)
model = nn.Sequential(
            nn.Flatten(),
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10)
        )
model = model.to(device)
print(model)
```

```{python}
epochs = 3
loss_fn = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)
```

## Run a train loop

```{python}
%%time
model.train()
for t in range(epochs):    
    for X, y in train_dataloader:
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)

        # Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f"Epoch {t} Loss: {loss.item()}")
```

::: footer
Adapted from: PyTorch (2022), [Quickstart](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html), PyTorch docs.
:::

## Far more common to subclass

```{python}
class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__()
        self.linear1 = nn.Linear(28*28, 512)
        self.linear2 = nn.Linear(512, 512)
        self.linear3 = nn.Linear(512, 10)
        
    def forward(self, x):
        x = F.relu(self.linear1(x.flatten(1)))
        x = F.relu(self.linear2(x))
        return self.linear3(x)
        
torch.manual_seed(0)
classy_model = NeuralNetwork().to(device)
classy_model
```

::: footer
Adapted from: PyTorch (2022), [Quickstart](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html), PyTorch docs.
:::

## Evaluate the fit

```{python}
model.eval()

num_correct = 0
test_size = 0
for X, y in test_dataloader:
    with torch.no_grad():
        pred = model(X.to(device))
        num_correct += torch.sum(y.to(device) == pred.argmax(1)).item()
        test_size += len(y)

print(f"Test accuracy: {100*num_correct/test_size:.2f}%")
```

## Predict new data

```{python}
X, y = next(iter(test_dataloader))
with torch.no_grad():
    pred = model(X.to(device))

predicted_classes = [classes[ind] for ind in pred.argmax(1)]
actual_classes = [classes[ind] for ind in y]
```

::: columns
::: {.column width="33%"}
```{python}
#| echo: false
i = 0
title = f'Predicted: "{predicted_classes[i]}"\nActual: "{actual_classes[i]}"'
plt.imshow(X[i][0])
plt.title(title);
```
:::
::: {.column width="33%"}
```{python}
#| echo: false
i = 3
title = f'Predicted: "{predicted_classes[i]}"\nActual: "{actual_classes[i]}"'
plt.imshow(X[i][0])
plt.title(title);
```
:::
::: {.column width="33%"}
```{python}
#| echo: false
i = 4
title = f'Predicted: "{predicted_classes[i]}"\nActual: "{actual_classes[i]}"'
plt.imshow(X[i][0])
plt.title(title);
```
:::
:::
