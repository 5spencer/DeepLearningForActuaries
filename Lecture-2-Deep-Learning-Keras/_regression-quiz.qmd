
# Quiz {visibility="uncounted"}

```{python}
#| echo: false
import numpy
import tensorflow as tf

numpy.random.seed(123)
x = numpy.random.rand(100)
y = 1_000 * numpy.random.rand(100)
z = 2*x + 0.001 * y + 1 + 1 * numpy.random.rand(100)

# X = np.c_[x, y]
# features = X
features = pandas.DataFrame({"$x_1$": x, "$x_2$": y})
targets = z
```

## Critique this ðŸ’© regression code

```{python}
#| echo: false
from tensorflow.keras.callbacks import EarlyStopping
tf.get_logger().setLevel('ERROR')
```

```{python}
X_train = features[:80]; X_test = features[81:]
y_train = targets[:80]; y_test = targets[81:]
```
```{python}
model = Sequential([
  Dense(32, activation='ReLU', input_dim=2),
   Dense(32, activation='ReLU', input_dim=2),
  Dense(1, activation='sigmoid')
])
model.compile(optimizer="adam", loss='mse')
es = EarlyStopping(patience=10)
fitted_model = model.fit(X_train, y_train, epochs=5,
  callbacks=[es], verbose=False)
```
```{python}
trainMAE = model.evaluate(X_train, y_train, verbose=False)
hist = model.fit(X_test, y_test, epochs=5,
  callbacks=[es], verbose=False)
hist.history["loss"]
testMAE = model.evaluate(X_test, y_test, verbose=False)
```

```{python}
f"Train MAE: {testMAE:.2f} Test MAE: {trainMAE:.2f}"
```

## The data

```{python}
#| echo: false
set_square_figures()
```

::: columns
::: column
```{python}
sns.scatterplot(
  x="$x_1$", y="$x_2$",
  c=targets, data=features);
```
:::
::: column
```{python}
sns.distplot(targets);
```

:::
:::

```{python}
#| echo: false
set_rectangular_figures()
```

## With warnings enabled

```{python}
#| echo: false
tf.get_logger().setLevel("WARN")
```

```{python}
model.fit(X_train, y_train, epochs=5,
  callbacks=[es], verbose=False);
```

```{python}
es = EarlyStopping(restore_best_weights=True, patience=10)
model.fit(X_train, y_train, epochs=5, validation_split=0.1,
  callbacks=[es], verbose=False);
```

## Later `input_dim` ignored

```{python}
#| echo: false
def skip_empty(line):
  if line.strip() != "":
    print(line.strip())
```

```{python}
model = Sequential([
  Dense(32, activation='ReLU', input_dim=2),
  Dense(32, activation='ReLU', input_dim=2),
  Dense(1, activation='ReLU')
])

model.compile(optimizer='adam', loss='mse')
model.summary(print_fn=skip_empty)
```

## Later `input_dim` ignored {data-visibility="uncounted"}

```{python}
model = Sequential([
  Dense(32, activation='ReLU', input_dim=2),
  Dense(32, activation='ReLU'),
  Dense(1, activation='ReLU')
])

model.compile(optimizer='adam', loss='mse')
model.summary(print_fn=skip_empty)
```

## Later `input_dim` ignored {data-visibility="uncounted"}

```{python}
model = Sequential([
  Dense(32, activation='ReLU'),
  Dense(32, activation='ReLU'),
  Dense(1, activation='ReLU')
])
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=5, verbose=False)
model.summary(print_fn=skip_empty)
```
